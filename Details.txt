


          
# Bookstore Management System - A Beginner's Guide

This project is a complete online bookstore management system that helps store owners manage their books, customers, and orders. Let me break down each part of the project:

## 1. Core Features and Their Implementation

### Book Management
- Located in `BookController.java` and `Book.java`
- Handles all book-related operations:
  - Storing book information (title, author, price, etc.)
  - Listing all books
  - Adding new books
  - Updating book details
  - Deleting books
  - Managing book inventory

### User Management
- Found in `AuthController.java` and `User.java`
- Manages two types of users:
  - Customers: Can browse and order books
  - Admins: Can manage books and process orders
- Features:
  - User registration
  - Login with secure authentication
  - Role-based access control

### Order Processing
- Implemented in `OrderController.java`, `Order.java`, and `OrderItem.java`
- Handles the complete order lifecycle:
  - Creating new orders
  - Tracking order status
  - Managing order history
  - Processing payments (mock implementation)

## 2. Technical Components

### Security (in `security` package)
- `JwtTokenProvider.java`: Creates and validates security tokens
- `SecurityConfig.java`: Sets up security rules
- `CustomUserDetailsService.java`: Manages user authentication

### Database Integration
- Uses MySQL database
- `application.properties`: Contains database configuration
- JPA repositories handle database operations

### API Documentation
- Swagger UI provides interactive API documentation
- Access at: `http://localhost:8080/swagger-ui.html`

## 3. How It All Works Together

1. **When a Customer Uses the System:**
   - Registers/Logs in through `/api/auth` endpoints
   - Receives a JWT token for authentication
   - Can browse books through `/api/books` endpoints
   - Places orders using `/api/orders` endpoints

2. **When an Admin Uses the System:**
   - Logs in with admin credentials
   - Can manage book inventory
   - Process orders and update their status
   - View all orders and customer information

3. **Behind the Scenes:**
   - JWT ensures secure communication
   - Database stores all information persistently
   - Spring Security manages access control
   - Exception handling provides clear error messages

## 4. Getting Started

1. **Setup:**
   - Install MySQL
   - Configure database settings in `application.properties`
   - Run the application

2. **First Steps:**
   - Create an admin user
   - Add some books to the inventory
   - Test the customer registration
   - Try placing and managing orders

This project demonstrates professional-grade features like:
- Secure authentication
- Database management
- RESTful API design
- Error handling
- API documentation
- Clean code organization
        